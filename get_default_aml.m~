function default_aml = get_default_aml(data)
        npy_matlab_folder = '/home/mcreamer/Documents/MATLAB/npy-matlab';
    addpath(genpath(npy_matlab_folder));

    % data_folder = '/home/mcreamer/Documents/data_sets/neuropal/creamer/20190916/multicolorworm_20190916_153351';
    data_folder = uigetdir('/home/mcreamer/Documents/data_sets/neuropal/creamer');

    CyOFP_channel = 4;
    data = load_multicolor_from_dat(data_folder);
    data = permute(data, [2, 1, 3, 4]);
    channels_to_keep = [0, 3, CyOFP_channel, 7, 8]+1;
    data = data(:,:,:,channels_to_keep);

    % get number of pixels in xyz
    pixels = size(data);
    pixels = pixels(1:3)';

    % get z step size
    piezo_position = csvread(fullfile(data_folder, 'piezoPosition.txt'));
    % this file is in fraction of 200 micrometer, convert to nanometers
    p_step = 2e5*(piezo_position(2) - piezo_position(1));

    % get xy step size
    % convert from nanometers to meters
    scale = 1e-9 * [420, 420, p_step]';

    % we don't have dic, set to gcamp for now?
    dicChannel = 2;

    % set lasers, when unmixed this isn't that informative
    lasers = [405, 488, nan, 561, 561]';

    % color channels according to neuropal paper
    colors = [0,	0,      255;
              255,	255,	255;
              0,	255,	0;
              255,	255,	255;
              255,	0,      0];

    channels = {'Ch1-tagBFP2';
                'Ch2-GCaMP6s';
                'Ch3-CyOFP';
                'Ch4-tagRFPt';
                'Ch5-mNeptune';};
     
    pixels = size(data);
    pixels = pixels(1:3);
    
    scale = [420, 420, 1666];
    emissions =  [371.4500,  469.0700;
                  620.0100,  758.4800;
                       NaN,       NaN;
                  620.0100,  758.4800;
                  620.0100,  758.4800];
    
    original_data = volume_with_noise;
    weights = ones(5, 1)/2;
    gamma_val = [0.5, 0.5, 0.8, 0.5, 0.5]';
    zeros_mask = ones(size(volume_with_noise,1), size(volume_with_noise,2));
    crop_mask = [1 size(data, 1); 1 size(data, 2)];
    flipX = false;
    flipY = false;
    rotation = 0;
    roll_val = 0;
    
    default_aml.pixels = pixels;
    default_aml.scale = scale;
    default_aml.original_scale = scale;
    default_aml.colors = colors;
    default_aml.channels = channels;
    default_aml.dicChannel = dicChannel;
    default_aml.lasers = lasers;
    default_aml.emissions = emissions;
    default_aml.data = volume_with_noise;
    default_aml.original_data = original_data;
    default_aml.weights = weights;
    default_aml.gamma_val = gamma_val;
    default_aml.zeros_mask = zeros_mask;
    default_aml.crop_mask = crop_mask;
    default_aml.flipX = flipX;
    default_aml.flipY = flipY;
    default_aml.rotation = rotation;
    default_aml.roll_val = roll_val;
end